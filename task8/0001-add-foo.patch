From 7dc766d81325ca9e00e971a167c0dc0f8734c0c6 Mon Sep 17 00:00:00 2001
From: = <=>
Date: Sat, 25 Jul 2020 23:40:55 +0530
Subject: [PATCH] add foo

---
 hello_world.c | 45 +++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 45 insertions(+)

diff --git a/hello_world.c b/hello_world.c
index a686ec8..6b6ffd4 100644
--- a/hello_world.c
+++ b/hello_world.c
@@ -5,12 +5,18 @@
 #include <linux/fs.h>
 #include <linux/debugfs.h>
 #include <linux/jiffies.h>
+#include <linux/spinlock.h>
 
 static char *id = "a21ee7cfaff1";
 static struct dentry *dir;
 
 static ssize_t debugfs_read(struct file *, char *, size_t, loff_t *);
 static ssize_t debugfs_write(struct file *, const char *, size_t, loff_t *);
+static ssize_t foo_read(struct file *, char *, size_t, loff_t *);
+static ssize_t foo_write(struct file *, const char *, size_t, loff_t *);
+
+static DEFINE_RWLOCK(foo_lock);
+static char foo_msg[PAGE_SIZE];
 
 static const struct file_operations debugfs_fileops = {
 	.owner = THIS_MODULE,
@@ -18,6 +24,12 @@ static const struct file_operations debugfs_fileops = {
 	.write = debugfs_write
 };
 
+static const struct file_operations foo_fops = {
+	.owner = THIS_MODULE,
+	.read = foo_read,
+	.write = foo_write
+};
+
 static int hello_init(void)
 {
 	debugfs_create_dir("eudyptula", NULL);
@@ -26,6 +38,8 @@ static int hello_init(void)
 
 	debugfs_create_u32("jiffies", 0444, dir, (u32 *)&jiffies);
 
+	debugfs_create_file("foo", 0644, dir, NULL, &foo_fops);
+
 	return 0;
 }
 
@@ -59,6 +73,37 @@ static ssize_t debugfs_write(struct file *f, const char *buf, size_t count,
 	return -EINVAL;
 }
 
+static ssize_t foo_read(struct file *f, char *buf, size_t count,
+	loff_t *offset)
+{
+	int ret;
+
+	read_lock(&foo_lock);
+	ret = simple_read_from_buffer(buf, count, offset, foo_msg,
+		strlen(foo_msg));
+	read_unlock(&foo_lock);
+
+	return ret;
+}
+
+static ssize_t foo_write(struct file *f, const char *buf, size_t count,
+	loff_t *offset)
+{
+	int ret;
+
+	if (count >= PAGE_SIZE)
+		return -EINVAL;
+
+	write_lock(&foo_lock);
+	ret = simple_write_to_buffer(foo_msg, sizeof(foo_msg), offset,
+		buf, count);
+	if (ret > 0)
+		foo_msg[ret] = '\0';
+	write_unlock(&foo_lock);
+
+	return ret;
+}
+
 module_init(hello_init);
 module_exit(hello_exit);
 
-- 
2.20.1

